# -*- coding: utf-8 -*-
"""Algorithmic Trading with Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1os-tZrVMg4FGqdhMXMN8vU2-pKi5CPvN
"""

import pandas as pd
import numpy as np
import yfinance as yf
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

# Download historical data for a stock, e.g., Apple Inc.
symbol = 'AAPL'
data = yf.download(symbol, start='2015-01-01', end='2024-01-01')
data.head()

# Calculate Moving Averages
data['SMA_10'] = data['Close'].rolling(window=10).mean()
data['SMA_50'] = data['Close'].rolling(window=50).mean()

# Calculate the Relative Strength Index (RSI)
delta = data['Close'].diff()
gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
data['RSI'] = 100 - 100 / (1 + gain / loss)

# Calculate MACD
data['MACD'] = data['Close'].ewm(span=12, adjust=False).mean() - data['Close'].ewm(span=26, adjust=False).mean()
data['Signal_Line'] = data['MACD'].ewm(span=9, adjust=False).mean()

# Drop NaN values
data = data.dropna()

# Create the target variable: 1 if the next day's price is higher, 0 if lower
data['Target'] = np.where(data['Close'].shift(-1) > data['Close'], 1, 0)

# Select features for the model
features = ['SMA_10', 'SMA_50', 'RSI', 'MACD', 'Signal_Line']
X = data[features]
y = data['Target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Initialize the Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Predict on the test data
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")



import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

# Assuming `backtest` contains the columns:
# 'Cumulative_Market_Return', 'Cumulative_Strategy_Return'
# with the dates as the index

# Generate moving averages for crossover signals
backtest['SMA_50'] = backtest['Cumulative_Market_Return'].rolling(window=50).mean()
backtest['SMA_200'] = backtest['Cumulative_Market_Return'].rolling(window=200).mean()

# Generate Buy/Sell signals based on SMA crossover
backtest['Buy_Signal'] = np.where(backtest['SMA_50'] > backtest['SMA_200'], 1, 0)
backtest['Sell_Signal'] = np.where(backtest['SMA_50'] < backtest['SMA_200'], 1, 0)

# Calculate Drawdown
backtest['Drawdown'] = backtest['Cumulative_Strategy_Return'] / backtest['Cumulative_Strategy_Return'].cummax() - 1

# Create subplots
fig, ax = plt.subplots(3, 1, figsize=(14, 12), sharex=True, gridspec_kw={'height_ratios': [3, 1, 1]})
plt.style.use('dark_background')

# Plot Cumulative Returns
ax[0].plot(backtest.index, backtest['Cumulative_Market_Return'], label='Market Return', color='cyan', linewidth=2)
ax[0].plot(backtest.index, backtest['Cumulative_Strategy_Return'], label='Strategy Return', color='orange', linewidth=2)

# Plot Buy/Sell Signals if available
if 'Buy_Signal' in backtest.columns and 'Sell_Signal' in backtest.columns:
    ax[0].scatter(backtest.index[backtest['Buy_Signal'] == 1],
                  backtest['Cumulative_Strategy_Return'][backtest['Buy_Signal'] == 1],
                  marker='^', color='green', s=100, label='Buy Signal')

    ax[0].scatter(backtest.index[backtest['Sell_Signal'] == 1],
                  backtest['Cumulative_Strategy_Return'][backtest['Sell_Signal'] == 1],
                  marker='v', color='red', s=100, label='Sell Signal')

# Add gridlines, labels, and title to the cumulative returns subplot
ax[0].grid(True, linestyle='--', alpha=0.7)
ax[0].set_ylabel('Cumulative Return', fontsize=12, color='white')
ax[0].set_title(f'Cumulative Returns: Trading Strategy vs Market', fontsize=14, color='white')
ax[0].legend(loc='upper left', fontsize=12)

# Plot Drawdown
ax[1].plot(backtest.index, backtest['Drawdown'], label='Drawdown', color='magenta', linewidth=2)
ax[1].grid(True, linestyle='--', alpha=0.7)
ax[1].set_ylabel('Drawdown', fontsize=12, color='white')
ax[1].set_title('Strategy Drawdown', fontsize=14, color='white')
ax[1].legend(loc='lower left', fontsize=12)

# Calculate and plot Moving Average of Strategy Return
moving_avg = backtest['Cumulative_Strategy_Return'].rolling(window=20).mean()
ax[2].plot(backtest.index, moving_avg, label='20-day Moving Avg', color='yellow', linewidth=2)
ax[2].grid(True, linestyle='--', alpha=0.7)
ax[2].set_ylabel('Moving Avg Return', fontsize=12, color='white')
ax[2].set_title('20-day Moving Average of Strategy Return', fontsize=14, color='white')
ax[2].legend(loc='upper left', fontsize=12)

# Format the x-axis to display dates properly and set labels
ax[2].xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
ax[2].xaxis.set_major_locator(mdates.MonthLocator(interval=3))
plt.xticks(rotation=45, color='white')
plt.xlabel('Date', fontsize=12, color='white')
plt.yticks(color='white')

# Show the plot
plt.show()